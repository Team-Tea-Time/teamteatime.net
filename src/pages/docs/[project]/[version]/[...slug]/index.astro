---
import { getCollection, getEntry } from 'astro:content';
import { getPartsFromDocsID, urlPartToTitle, absolutePathFromParts } from '../../../../../utils/docs';
import { Navigation, type NavItem } from '../../../../../navigation/Navigation';
import DocsLayout from '../../../../../layouts/DocsLayout.astro';

export async function getStaticPaths() {
    const docs = await getCollection('docs');
    
    const paths: any = [];
    docs.forEach(entry => {
        const [project, version, slug] = getPartsFromDocsID(entry.id);
        const params = {
            project,
            version,
            slug
        };
        paths.push({ params });
    });
    
    return paths;
}

const { project, version, slug } = Astro.params;

const docs = await getCollection('docs');

let navigation = new Navigation();
let versions: Array<NavItem> = [];
let seen: Set<string> = new Set();

docs.forEach(entry => {
    const [entryProject, entryVersion, entrySlug] = getPartsFromDocsID(entry.id);

    const versionNavItem: NavItem = {
        label: entryVersion,
        url: `/docs/${entryProject}/${entryVersion}`,
        isActive: entryVersion == version,
    };

    if (!seen.has(versionNavItem.url)) {
        versions.push(versionNavItem);
        seen.add(versionNavItem.url);
    }

    if (project != entryProject || version != entryVersion) {
        return;
    }
    
    let url = absolutePathFromParts(entryProject, entryVersion, entrySlug);

    navigation.addToGroup(entry.data.group, {
        label: entry.data.title,
        url,
        isActive: url == absolutePathFromParts(project, version, slug)
    });
});

const originalSlug = `${project}/${(version as string).replace('.', '')}/${slug}`;
const entry = (await getEntry('docs', originalSlug))!;
const { Content } = await entry.render();
---

<DocsLayout
    title={`${entry!.data.title} - ${urlPartToTitle(project as string)} ${version} - Team Tea Time`}
    heading={entry.data.title}
    versions={Array.from(versions)}
    navigation={navigation}>
    <Content />
</DocsLayout>