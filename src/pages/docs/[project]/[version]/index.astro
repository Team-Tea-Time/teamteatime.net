---
import { getCollection, getEntry } from 'astro:content';
import { getPartsFromDocsID, urlPartToTitle, absolutePathFromParts } from '../../../../utils/docs';
import { Navigation, type NavItem } from '../../../../navigation/Navigation';
import DocsLayout from '../../../../layouts/DocsLayout.astro';

export async function getStaticPaths() {
    const projects = await getCollection('projects');
    
    const paths: any = [];
    projects.forEach(project => {
        project.data.versions.forEach(version => {
            paths.push({ params: { project: project.id, version }});
        });
    });
    
    return paths;
}

const { project, version } = Astro.params;

const docs = await getCollection('docs');

let navigation = new Navigation();
let versions: Array<NavItem> = [];
let seen: Set<string> = new Set();

docs.forEach(entry => {
    const [entryProject, entryVersion, entrySlug] = getPartsFromDocsID(entry.id);

    const versionNavItem: NavItem = {
        label: entryVersion,
        url: `/docs/${entryProject}/${entryVersion}`,
        isActive: entryVersion == version,
    };

    if (!seen.has(versionNavItem.url)) {
        versions.push(versionNavItem);
        seen.add(versionNavItem.url);
    }

    if (project != entryProject || version != entryVersion) {
        return;
    }

    let url = absolutePathFromParts(entryProject, entryVersion, entrySlug);

    navigation.addToGroup(entry.data.group, {
        label: entry.data.title,
        url,
        isActive: false
    });
});

const data = (await getEntry('projects', project)).data;
---

<DocsLayout title={data.title} heading={data.title} versions={versions} navigation={navigation}>
</DocsLayout>